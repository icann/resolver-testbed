# -*- mode: ruby -*-
# vi: set ft=ruby :

# Require YAML module to parse the Ansible inventory configuration.
require 'yaml'

# Helper - Try to read YAML contents if a condition is true and the file exists.
def yaml_contents(filepath, as_long_as: true, otherwise: {})
  if as_long_as and ! filepath.empty? and File.file?(filepath) then
    YAML.load_file(filepath)
  else
    otherwise
  end
end

# Helper - Try to get a value from a hash
def get_value(dict, name, as_long_as: true, otherwise: '')
  if as_long_as and ! name.empty? and ! dict.empty? and dict.has_key?(name) then
    dict[name]
  else
    otherwise
  end
end

# Read optional local (non-versioned) configuration
local_conf = yaml_contents '.local_config.yml'
extra_hosts_path = get_value local_conf, 'extra_hosts_path'
extra_host_vars_path = get_value local_conf, 'extra_host_vars_path'
use_bridge = get_value local_conf, 'use_bridge', otherwise: false

# Read the hosts file ...
hosts_conf = YAML.load_file('ansible/hosts')
# ... and any extra local host file
extra_hosts_conf = yaml_contents extra_hosts_path, as_long_as: ! extra_hosts_path.empty?

# Read the VirtualBox host configuration ...
vbox_conf = YAML.load_file('ansible/host_vars/VBox-host')
# ... and any extra local configuration
extra_vbox_conf = yaml_contents extra_host_vars_path + '/VBox-host', as_long_as: ! extra_host_vars_path.empty?
vbox_conf.merge!(extra_vbox_conf)

# These are used in each VM inventory host_vars file for the network names.
# They are eval'ed later.
HOSTONLY_NET = vbox_conf['vbox_hostonlyif_name']
RESOLVER_INTNET = vbox_conf['resolver_intnet']
SERVER_INTNET = vbox_conf['server_intnet']

# The bridge network is only relevant based on local configuration
BRIDGE_NET = get_value vbox_conf, 'bridge_net'

Vagrant.configure(2) do |config|
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Gather all vms
  vms = hosts_conf['all']['children']['vms']['hosts']
  extra_vms = {}
  if !extra_hosts_conf.empty? then
    extra_vms = extra_hosts_conf['all']['children']['vms']['hosts']
  end
  all_vms = vms.merge(extra_vms.nil? ? {} : extra_vms)

  # Setup each configured VM
  all_vms.each do |vhost, _|
    config.vm.define vhost do |h|
      # Load host_vars of the host ...
      vm_conf = yaml_contents 'ansible/host_vars/' + vhost
      # ... and any possible local host_vars
      extra_vm_conf = yaml_contents extra_host_vars_path + '/' + vhost, as_long_as: ! extra_host_vars_path.empty?
      vm_conf.merge!(extra_vm_conf)

      # Extra networks if configured locally
      extra_networks = get_value vm_conf, 'extra_networks', otherwise: []

      # Trivial check for non-existing configuration
      if vm_conf.empty? then
        warn "VM '" + vhost + "' does not have a configuration!"
        warn "Looked at:"
        warn "  - ansible/host_vars/" + vhost
        if ! extra_host_vars_path.empty? then
          warn "  - " + extra_host_vars_path + '/' + vhost
        end
        warn "Aborting!"
        exit 1
      end

      # Normal Vargant box configuration
      h.vm.box = vm_conf['box']
      h.vm.provider "virtualbox" do |v|
        v.name = vhost
        v.cpus = vm_conf['cpus']
        v.memory = vm_conf['memory']
        (vm_conf['networks'] + extra_networks).each do |n|
          a = n['vbox_arguments']
          # Enable any bridge interfaces conditionally
          if a[3] == 'BRIDGE_NET' and use_bridge and ! BRIDGE_NET.empty? then
            v.customize ["modifyvm", :id, a[0], a[1], a[2], eval(a[3])]
          end
        end
      end

      # Extra options for Vagrant
      if vm_conf['extra'].nil? || vm_conf['extra'].empty?
        # Left empty for ruby's weird empty check above
      else
        vm_conf['extra'].each do |k, v|
            h.vm.instance_variable_set('@'+k, v)
        end
      end

      # Optional simple provisioning with net_inline
      if vm_conf['provision']['net_inline'].nil? || vm_conf['provision']['net_inline'].empty?
        # Left empty for ruby's weird empty check above
      else
        h.vm.provision "shell", inline: vm_conf['provision']['net_inline']
      end

      # Optional simple provisioning with net_script
      if vm_conf['provision']['net_script'].nil? || vm_conf['provision']['net_script'].empty?
        # Left empty for ruby's weird empty check above
      else
        h.vm.provision "shell", path: vm_conf['provision']['net_script']
      end

      # ... then net_playbook if present ...
      # XXX DISABLED: change to dummy playbook to get the vagrant genrated
      #               inventory; with current behavior makes more sense to
      #               provision manually.
      #if vm_conf['provision']['net_playbook'].nil? || vm_conf['provision']['net_playbook'].empty?
      #  # Left empty for ruby's weird empty check above
      #else
      #  h.vm.provision "ansible" do |ansible|
      #    ansible.playbook = vm_conf['provision']['net_playbook']
      #  end
      #end

      # This is a dummy ping command to make Vagrant auto generate an Ansible
      # inventory. Run always so that the inventory is always updated.
      h.vm.provision "ansible", run: "always" do |ansible|
        #ansible.config_file = ansible_cfg
        ansible.playbook = 'ansible/dummy_vagrant_provision.yml'
      end

      # ... and shutdown
      # XXX DISABLED: recent Vagrant versions do not like that and record
      #               the host as shutdown outside of Vagrant; messes with the
      #               auto-generated inventory file.
      #h.vm.provision "shell", inline: vm_conf['provision']['shutdown_command']

      # Run the normal provisioning the rest of the time
      # XXX DISABLED: We need an explicit shutdown action for the VMs to be sure
      #               that any system changes above will be enabled for all
      #               possible OSes.
      #if vm_conf['provision']['playbook'].nil? || vm_conf['provision']['playbook'].empty?
      #  # Left empty for ruby's weird empty check above
      #  # This if is still here because servers-vm has no Ansible yet.
      #else
      #  h.vm.provision "ansible", run: "always" do |ansible|
      #    ansible.playbook = vm_conf['provision']['playbook']
      #  end
      #end
    end
  end

end
