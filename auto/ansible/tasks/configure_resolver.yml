---
- name: Per software configuration tasks.
  delegate_to: "{{ on_host }}"
  vars:
    this_source_dir: "{{ BUILD_SOURCE_DIR }}/{{ software_name }}"
    this_target_dir: "{{ BUILD_TARGET_DIR }}/{{ software_name }}"
  block:
  - name: Check if we already built the source.
    ansible.builtin.stat:
      path: "{{ this_target_dir }}/.compiled.this"
    register: software_compiled

  - name: Configure compiled software
    when: software_compiled.stat.exists
    block:
    - name: Configure BIND
      when: software_sname == 'bind'
      block:
      - name: Create {{ this_target_dir }}/etc/bind directory
        ansible.builtin.file:
          path: "{{ this_target_dir }}/etc/bind"
          state: directory
          mode: '0755'
          
      - name: Copy bind.keys
        ansible.builtin.copy:
          src: files/bind.keys
          dest: "{{ this_target_dir }}/etc/bind.keys"

      - name: Install (templated) unbound.conf
        ansible.builtin.template:
          src: "templates/resolvers/{{ software_sname }}.conf.j2"
          dest: "{{ this_target_dir }}/etc/bind/bind.conf"

      - ansible.builtin.include_tasks:
          file: "tasks/install_server_service_systemd.yml"
        vars:
          software_type: "{{ software_sname }}"
          software_target_dir: "{{ this_target_dir }}"
          service_name: "{{ software_name | replace('-', '') | replace ('.', '') }}"
          n_cpus: 1

    - name: Configure Unbound
      when: software_sname == 'unbound'
      block: 
      - name: Install (templated) unbound.conf
        ansible.builtin.template:
          src: "templates/resolvers/{{ software_sname }}.conf.j2"
          dest: "{{ this_target_dir }}/etc/unbound/unbound.conf"
    
      - name: Is unbound-setup configured?
        ansible.builtin.stat:
          path: "{{ this_target_dir }}/etc/unbound/unbound_control.key"
        register: unbound_control_key
    
      - name: Run unbound-control-setup
        ansible.builtin.shell:
          cmd: "sbin/unbound-control-setup"
          chdir: "{{ this_target_dir }}"
        when: not unbound_control_key.stat.exists
    
      - name: Is resolver started?
        stat:
          path: "{{ this_target_dir }}/etc/unbound/unbound.pid"
        register: unbound_pid
    
      - name: stop resolver (if running)
        ansible.builtin.shell:
          cmd: "PATH={{ this_target_dir }}/bin:{{ this_target_dir }}/sbin:$PATH unbound-control stop || rm -f '{{ this_target_dir }}/etc/unbound/unbound.pid'"
          chdir: "{{ this_target_dir }}"
        when: unbound_pid.stat.exists
