---
- name: Use default task variables if not specified.
  ansible.builtin.set_fact:
    pip_executable: "{{ whichpip | default('pip3') }}"
    pip_version: "{{ pipversion | default(false) }}"
    system_ansible: "{{ use_system_ansible | default(true) }}"

- block:
  - name: (Linux) Install generic packages.
    ansible.builtin.apt:
      pkg:
        - tar
        - tree
        - wget
        - vim
        - tmux
        - htop
        - dnsutils
        - rsync
      state: present
      update_cache: yes

  - name: (Linux) Install system ansible.
    ansible.builtin.apt:
      pkg:
        - ansible
      state: present
    when: system_ansible is true

  - block:
    - name: (Linux) Remove unwanted packages.
      ansible.builtin.apt:
        pkg:
          - ansible
        state: absent

    - name: (Linux) Get latest pip.
      ansible.builtin.pip:
        name: "{{ 'pip=={}'.format(pip_version) if pip_version else 'pip' }}"
        state: "{{ 'present' if pip_version else 'latest' }}"
        executable: "{{ pip_executable }}"

    - name: (Linux) Install Ansible with pip.
      ansible.builtin.pip:
        name: ansible==4.2.0
        executable: "{{ pip_executable }}"
    when: system_ansible is false

  when: network_configuration.system in ['linux', 'ubuntu']

- block:
  - name: (FreeBSD) Install generic packages.
    community.general.pkgng:
      name:
        - gtar
        - tree
        - wget
        - vim
        - tmux
        - htop
        - rsync
      state: present

  - name: (FreeBSD) Install system ansible.
    community.general.pkgng:
      name:
        - py39-ansible
      state: present
    when: system_ansible is true

  - block:
    - name: (FreeBSD) Remove unwanted packages.
      community.general.pkgng:
        name:
          - py39-ansible
        state: absent

    - name: (FreeBSD) Get latest pip.
      ansible.builtin.pip:
        name: "{{ 'pip=={}'.format(pip_version) if pip_version else 'pip' }}"
        state: "{{ 'present' if pip_version else 'latest' }}"
        executable: "{{ pip_executable }}"

    - name: (FreeBSD) Install Ansible with pip.
      ansible.builtin.pip:
        name: ansible==4.2.0
        executable: "{{ pip_executable }}"
    when: system_ansible is false

  when: network_configuration.system == 'freebsd'

- block:
  - name: (NetBSD) Get mozilla-rootcerts.
    community.general.pkgin:
      name:
        - mozilla-rootcerts
      state: present
      update_cache: true
      force: true

  - name: (NetBSD) Install mozilla-rootcerts.
    ansible.builtin.shell:
      cmd: "/usr/pkg/sbin/mozilla-rootcerts install"
    register: result
    failed_when:
      - result.rc != 0
      - '"already contains certificates" not in result.stderr'

  - name: (NetBSD) Install generic packages.
    community.general.pkgin:
      name:
        - gtar
        - tree
        - wget
        - vim
        - tmux
        - htop
        - rsync
      state: present

  - name: (NetBSD) Install system ansible.
    community.general.pkgin:
      name:
        - ansible
      state: present
    when: system_ansible is true

  - block:
    - name: (NetBSD) Remove unwanted packages.
      community.general.pkgin:
        name:
          - ansible
        state: absent

    - name: (NetBSD) Get latest pip.
      ansible.builtin.pip:
        name: "{{ 'pip=={}'.format(pip_version) if pip_version else 'pip' }}"
        state: "{{ 'present' if pip_version else 'latest' }}"
        executable: "{{ pip_executable }}"

    - name: (NetBSD) Install Ansible with pip.
      ansible.builtin.pip:
        name: ansible==4.2.0
        executable: "{{ pip_executable }}"
    when: system_ansible is false

  when: network_configuration.system == 'netbsd'

- block:
  - name: (CentOS) Install EPEL.
    ansible.builtin.yum:
      name:
        - epel-release
      state: present

  - name: (CentOS) Install generic packages.
    ansible.builtin.yum:
      name:
        - tar
        - tree
        - wget
        - vim
        - tmux
        - bind-utils
        - htop
        - rsync
      state: present

  - name: (CentOS) Install system ansible.
    ansible.builtin.yum:
      name:
        - ansible
      state: present
    when: system_ansible is true

  - block:
    - name: (CentOS) Remove unwanted packages.
      ansible.builtin.yum:
        name:
          - ansible
        state: absent

    - name: (CentOS) Get latest pip.
      ansible.builtin.pip:
        name: "{{ 'pip=={}'.format(pip_version) if pip_version else 'pip' }}"
        state: "{{ 'present' if pip_version else 'latest' }}"
        executable: "{{ pip_executable }}"

    - name: (CentOS) Install Ansible with pip.
      ansible.builtin.pip:
        name: ansible==4.2.0
        executable: "{{ pip_executable }}"
    when: system_ansible is false

  when: network_configuration.system == 'centos'

- name: Unknown system; fail the playbook.
  ansible.builtin.fail:
    msg: "Unknown system! Cannot install packages!"
  when: "network_configuration.system not in ['linux', 'ubuntu', 'freebsd', 'netbsd', 'centos']"
